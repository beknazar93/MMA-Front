import React, { useState, useEffect, useCallback, useMemo } from "react";
import { fetchTotalIncome } from "../../api/API";
import './ClientIncome.scss';

const ClientIncome = () => {
  const [filters, setFilters] = useState({
    trainer: "",
    sport_category: "",
    day: "",
    month: "",
    year: "",
    payment: "",
    typeClient: "",
  });
  const [totalIncome, setTotalIncome] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const trainers = useMemo(
    () => [
      "–ê–±–¥—ã–∫–∞–¥—ã—Ä–æ–≤ –°—É–ª—Ç–∞–Ω", "–ê–∑–∏–∑–±–µ–∫ –£—É–ª—É –ë–∞—è–º–∞–Ω", "–ê—Å–∞–Ω–±–∞–µ–≤ –≠—Ä–ª–∞–Ω", "–ñ—É–º–∞–ª—ã –£—É–ª—É –ê—Ä–∏–µ—Ç",
      "–ö–∞–ª–º–∞–º–∞—Ç –£—É–ª—É –ê–∫–∞–π", "–õ—É–∫–∞—Å –ö—Ä–∞–±–±", "–ú–∞—à—Ä–∞–ø–æ–≤ –ñ—É–º–∞–±–∞–π", "–ú–∞—à—Ä–∞–ø–æ–≤ –¢–∏–ª–µ–∫",
      "–ú–µ–¥–µ—Ä–±–µ–∫ –£—É–ª—É –°–∞—Ñ–∞—Ä–º—É—Ä–∞—Ç", "–ú–∏–Ω–±–∞–µ–≤ –°—É–ª–∞–π–º–∞–Ω", "–ú–æ–π–¥—É–Ω–æ–≤ –ú–∏—Ä–ª–∞–Ω", "–ü–∞–∑—ã–ª–æ–≤ –ö—É—Ç–º–∞–Ω",
      "–¢–∞–∂–∏–±–∞–µ–≤ –ê–∑–∞–º–∞—Ç", "–¢—É—Ä–≥—É–Ω–æ–≤ –ò—Å–ª–∞–º",
    ],
    []
  );

  const sports = useMemo(
    () => [
      "–ë–æ–∫—Å", "–ë–æ—Ä—å–±–∞", "–ì—Ä–µ–∫–æ-—Ä–∏–º—Å–∫–∞—è –±–æ—Ä—å–±–∞", "–î–∑—é–¥–æ", "–ö–∏–∫–±–æ–∫—Å", "–ö—Ä–æ—Å—Å—Ñ–∏—Ç",
      "–ö—É–ª–∞—Ç—É", "–°–∞–º–±–æ", "–¢—Ö—ç–∫–≤–æ–Ω–¥–æ",
    ],
    []
  );

  const months = useMemo(
    () => [
      "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç",
      "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å",
    ],
    []
  );

  const years = useMemo(() => [2025], []);
  const days = useMemo(() => Array.from({ length: 31 }, (_, i) => (i + 1).toString()), []);
  const paymentStatuses = useMemo(() => ["–û–ø–ª–∞—á–µ–Ω–æ", "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"], []);
  const typeClients = useMemo(() => ["–û–±—ã—á–Ω—ã–π", "–ü—Ä–æ–±–Ω—ã–π", "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π", "–ê–±–æ–Ω–µ–º–µ–Ω—Ç"], []);

  const loadIncome = useCallback(async () => {
    if (Object.values(filters).every((value) => value === "")) {
      setTotalIncome(0);
      return;
    }

    setLoading(true);
    try {
      const result = await fetchTotalIncome(filters);
      setTotalIncome(result.income || 0);
      setError(null);
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.");
    } finally {
      setLoading(false);
    }
  }, [filters]);

  useEffect(() => {
    const timer = setTimeout(() => loadIncome(), 300);
    return () => clearTimeout(timer);
  }, [loadIncome]);

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({ ...prev, [name]: value }));
  };

  const resetFilters = () => {
    setFilters({
      trainer: "", sport_category: "", day: "", month: "", year: "", payment: "", typeClient: "",
    });
  };

  const calculatedIncome60 = useMemo(() => (totalIncome * 0.6).toFixed(2), [totalIncome]);
  const calculatedIncome40 = useMemo(() => (totalIncome * 0.4).toFixed(2), [totalIncome]);

  if (error) return <p className="client-income__error">–û—à–∏–±–∫–∞: {error}</p>;

  return (
    <div className="client-income">
      <div className="client-income__header">
        <span className="client-income__icon">üí∏</span>
        <h1 className="client-income__title">–û–±—â–∏–π –¥–æ—Ö–æ–¥</h1>
      </div>
      <div className="client-income__filters">
        <div className="client-income__filter-group">
          <select
            name="trainer"
            value={filters.trainer}
            onChange={handleFilterChange}
            className="client-income__select"
            aria-label="–¢—Ä–µ–Ω–µ—Ä"
          >
            <option value="">–¢—Ä–µ–Ω–µ—Ä</option>
            {trainers.map((trainer) => (
              <option key={trainer} value={trainer}>{trainer}</option>
            ))}
          </select>
          <select
            name="sport_category"
            value={filters.sport_category}
            onChange={handleFilterChange}
            className="client-income__select"
            aria-label="–°–ø–æ—Ä—Ç"
          >
            <option value="">–°–ø–æ—Ä—Ç</option>
            {sports.map((sport) => (
              <option key={sport} value={sport}>{sport}</option>
            ))}
          </select>
          <select
            name="typeClient"
            value={filters.typeClient}
            onChange={handleFilterChange}
            className="client-income__select"
            aria-label="–¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞"
          >
            <option value="">–¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞</option>
            {typeClients.map((type) => (
              <option key={type} value={type}>{type}</option>
            ))}
          </select>
        </div>
        <div className="client-income__filter-group">
          <select
            name="day"
            value={filters.day}
            onChange={handleFilterChange}
            className="client-income__select"
            aria-label="–î–µ–Ω—å"
          >
            <option value="">–î–µ–Ω—å</option>
            {days.map((day) => (
              <option key={day} value={day}>{day}</option>
            ))}
          </select>
          <select
            name="month"
            value={filters.month}
            onChange={handleFilterChange}
            className="client-income__select"
            aria-label="–ú–µ—Å—è—Ü"
          >
            <option value="">–ú–µ—Å—è—Ü</option>
            {months.map((month) => (
              <option key={month} value={month}>{month}</option>
            ))}
          </select>
          <select
            name="year"
            value={filters.year}
            onChange={handleFilterChange}
            className="client-income__select"
            aria-label="–ì–æ–¥"
          >
            <option value="">–ì–æ–¥</option>
            {years.map((year) => (
              <option key={year} value={year}>{year}</option>
            ))}
          </select>
        </div>
        <div className="client-income__filter-group">
          <select
            name="payment"
            value={filters.payment}
            onChange={handleFilterChange}
            className="client-income__select"
            aria-label="–û–ø–ª–∞—Ç–∞"
          >
            <option value="">–û–ø–ª–∞—Ç–∞</option>
            {paymentStatuses.map((status) => (
              <option key={status} value={status}>{status}</option>
            ))}
          </select>
          <button
            className="client-income__reset-btn"
            onClick={resetFilters}
            aria-label="–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
          >
            <span className="client-income__reset-icon">üîÑ</span> –û—á–∏—Å—Ç–∏—Ç—å
          </button>
        </div>
      </div>
      <div className={`client-income__result ${loading ? "client-income__result--loading" : ""}`}>
        {loading ? (
          <div className="client-income__loading">
            <span className="client-income__loading-spinner"></span> –ó–∞–≥—Ä—É–∑–∫–∞...
          </div>
        ) : (
          <>
            <div className="client-income__total">
              <span className="client-income__total-amount">{totalIncome.toLocaleString()}</span>
              <span className="client-income__total-unit">—Å–æ–º</span>
            </div>
            <div className="client-income__percentages">
              <div className="client-income__percentage">
                <span className="client-income__percentage-label">60%</span>
                <span className="client-income__percentage-value">{calculatedIncome60} —Å–æ–º</span>
              </div>
              <div className="client-income__percentage">
                <span className="client-income__percentage-label">40%</span>
                <span className="client-income__percentage-value">{calculatedIncome40} —Å–æ–º</span>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default ClientIncome;